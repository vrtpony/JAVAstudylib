//使用抽象類別
//abstract class 變數名稱
//abstract class void show()
//用途 當car 類別與plane 類別都有show()
//可以透過抽象類別做轉介, 使用陣列宣告類別做car類別與plane類別分支

abstract class Vehicle
{
//再使用String 類別, 使用上遇到一些問題
//如果要個建立setCarName(String ...) ; setPlaneName(String....)
//v[0].setCarName(str) 
//v[1].setPlaneName(str)
//是沒辦法這樣呼叫的 !! 因為是在VehiceName 類別
//要改成在VehiceName 建立

	 protected String name;  	//千萬不用加入 static 否則會固定值不變.... 找了半天才找到
	
	public void setVehicleName(String nm){
		name = nm;
	}

		
   abstract void show(); //抽象類別不能拿來產生新的物件,無法透過new運算子產生新的物件
						 //抽象類別內部的method沒有定義處理的方式
}

class Car extends Vehicle
{
	private int num;
	private double gas;
	
	public Car(int n, double g){
		
		num = n;
		gas = g;
		System.out.println("汽車參數初始化 !!");
	}
	
	public void show()
	{
		System.out.println("汽車廠牌: "+name+" ; "+"車牌號碼: "+this.num+" ; "+"汽車的汽油量"+this.gas);
	}
}

class Plane extends Vehicle
{
	private int flight;
	
	public Plane(int f){
		
		flight = f;
		System.out.println("飛機參數初始化 !!");
	}
	public void show()
	{
		System.out.println("飛機公司: "+name+" ; "+"飛機班次: "+this.flight);
	}
}

class PROG2
{
	public static void main(String args[])
	{
		String str[] = new String[]{"保時捷","長榮"};
				
	    Vehicle vc[] = new Vehicle[2]; //抽象方法 show()
	   
	    vc[0] = new Car(1234, 50.5);   //car 類別物件
	    vc[0].setVehicleName(str[0]);	

	    System.out.println();
		
		vc[1] = new Plane(932);		   //plane 類別物件
		vc[1].setVehicleName(str[1]);

	    System.out.println();

		for(int i=0 ; i<vc.length; i++){
			vc[i].show();
		}

	    System.out.println();
		
	}	
}	
